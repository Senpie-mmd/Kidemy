// <auto-generated />
using System;
using Kidemy.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Kidemy.Infra.Data.Migrations
{
    [DbContext(typeof(KidemyContext))]
    [Migration("20240505081049_addAllTables")]
    partial class addAllTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Barnamenevisan.Localizing.Entity.LocalizedProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CultureName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LocalizedProperty");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.AboutUs.AboutUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ImageNumber1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageNumber2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageNumber3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageNumber4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageNumber5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("OurGoal")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("OurGoalDescription")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OurGoalFeatures")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OurGoalTitle")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("AboutUs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "توضیحات درباره ما",
                            ImageNumber1 = "/assets/images/about/05.jpg",
                            ImageNumber2 = "/assets/images/about/03.jpg",
                            ImageNumber3 = "/assets/images/about/09.jpg",
                            ImageNumber4 = "/assets/images/about/10.jpg",
                            ImageNumber5 = "/assets/images/about/06.jpg",
                            IsDeleted = false,
                            Title = "عنوان درباره ما"
                        });
                });

            modelBuilder.Entity("Kidemy.Domain.Models.AboutUs.AboutUsProgressBar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AboutUsProgressBar");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Account.AccountCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("ExpiryDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("AccountCode");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.BankAccountCard.BankAccountCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShabaNumber")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BankAccountCard");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Banner.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("Place")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Banner");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Blog.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Blog.BlogComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<int>("CommentedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ReplyCommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("ReplyCommentId");

                    b.ToTable("BlogComment");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Blog.BlogTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BlogTag");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Blog.BlogTagMapping", b =>
                {
                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("BlogId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("BlogTagMapping");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Cart.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Cart.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Consultation.Adviser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConsultationPercentage")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Adviser");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Consultation.AdviserAvailableDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdviserId")
                        .HasColumnType("int");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("AdviserId");

                    b.ToTable("AdviserAvailableDate");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Consultation.AdviserConsultationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdviserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdviserId");

                    b.ToTable("AdviserConsultationType");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Consultation.ConsultationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdviserConsultationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("AdviserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FixedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RequestedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("SelectedDateId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdviserConsultationTypeId");

                    b.HasIndex("AdviserId");

                    b.HasIndex("SelectedDateId");

                    b.ToTable("ConsultationRequest");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.ContactUs.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ContactUs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "تهران",
                            CreatedDateOnUtc = new DateTime(2024, 5, 5, 11, 40, 48, 944, DateTimeKind.Local).AddTicks(4967),
                            Email = "Kidemy.sample@gmail.com",
                            IsDeleted = false,
                            Mobile = "09121111111",
                            UpdatedDateOnUtc = new DateTime(2024, 5, 5, 11, 40, 48, 944, DateTimeKind.Local).AddTicks(4974)
                        });
                });

            modelBuilder.Entity("Kidemy.Domain.Models.ContactUs.ContactUsForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnswererId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("ContactUsForm");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowComenting")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DemoVideoFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileSuffix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasCertificate")
                        .HasColumnType("bit");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOffer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MasterCommissionPercentage")
                        .HasColumnType("int");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("VideosTotalTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPopular")
                        .HasColumnType("bit");

                    b.Property<string>("LogoFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCourseCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentCourseCategoryId");

                    b.ToTable("CourseCategory");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseCategoryMapping", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CourseCategoryMapping");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentedById")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ReplyCommnetId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ReplyCommnetId");

                    b.ToTable("CourseComment");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseCommentReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CheckedById")
                        .HasColumnType("int");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAdminChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("CourseCommentReport");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CourseNotificationType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CourseNotification");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AskedById")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserReaction")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseQuestion");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseQuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AnsweredById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("CourseQuestionAnswer");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CourseTag");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseTagMapping", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("CourseTagMapping");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseUserMapping", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "UserId");

                    b.ToTable("CourseUserMapping");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("ThumbnailImageName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("VideoCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("VideoFileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeSpan>("VideoLength")
                        .HasMaxLength(10)
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("VideoCategoryId");

                    b.ToTable("CourseVideo");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseVideoCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CourseVideoCategory");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserIp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseView");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.FavouriteCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FavouriteCourse");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.CourseRequest.CourseRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConfirm")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PreferedMasterId")
                        .HasColumnType("int");

                    b.Property<int>("RequestedById")
                        .HasColumnType("int");

                    b.Property<string>("SelectedTags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CourseRequest");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.CourseRequest.CourseRequestMasterVolunteer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MasterDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseRequestId");

                    b.ToTable("CourseRequestMasterVolunteer");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.CourseRequest.CourseRequestVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAgree")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseRequestId");

                    b.ToTable("CourseRequestVote");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Discount.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AutoUse")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDateTimeOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDateTimeOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Discount.DiscountLimitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.ToTable("DiscountLimitation");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Discount.DiscountLimitationCategoryMapping", b =>
                {
                    b.Property<int>("DiscountLimitationId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("DiscountLimitationId", "CategoryId");

                    b.ToTable("DiscountLimitationCategoryMapping");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Discount.DiscountLimitationCourseMapping", b =>
                {
                    b.Property<int>("DiscountLimitationId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("DiscountLimitationId", "CourseId");

                    b.ToTable("DiscountLimitationCourseMapping");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Discount.DiscountLimitationUsageCountMapping", b =>
                {
                    b.Property<int>("DiscountLimitationId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("DiscountLimitationId");

                    b.ToTable("DiscountLimitationUsageCountMapping");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Discount.DiscountLimitationUserMapping", b =>
                {
                    b.Property<int>("DiscountLimitationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DiscountLimitationId", "UserId");

                    b.ToTable("DiscountLimitationUserMapping");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Discount.DiscountUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinally")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("ReducedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderItemId")
                        .IsUnique()
                        .HasFilter("[OrderItemId] IS NOT NULL");

                    b.ToTable("DiscountUsage");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.DynamicText.DynamicText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DynamicText");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Position = 1,
                            Text = "  شما کاربر گرامی می‌توانید برای دسترسی به امکانات ویژه سایت، اشتراک ویژه را فراهم نمایید."
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Position = 2,
                            Text = "برای نهایی کردن فاکتور باید کیف پول خود را به میزان مبلغ قابل پرداخت فاکتور شارژ نمایید.برای ادامه بر روی دکمه زیر کلیک نمایید ."
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Position = 3,
                            Text = "درحال حاضر شما عضو ویژه سایت نمی باشید ! درصورت تمایل برای استفاده از امکانات اعضای ویژه باید اشتراک خریداری نمایید"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Position = 4,
                            Text = "شما عضو ویژه سایت می باشید تا تاریخ "
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Position = 5,
                            Text = "چرا آموزش برنامه نویسی به\r\nکودکان و نوجوانان !؟"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Position = 6,
                            Text = "آموزش برنامه نویسی به کودکان و نوجوانان به دلیل اینکه در این سنین ذهنیت کودکان و نوجوانان برای یادگیری برنامه نویسی بسیار مناسب است و این موضوع باعث می شود که کودکان و نوجوانان بتوانند به راحتی و با سرعت بالا برنامه نویسی را یاد بگیرند."
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Position = 7,
                            Text = "مدرس مجرب"
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Position = 8,
                            Text = "ارائه مدرک"
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            Position = 9,
                            Text = "جذب مدرس"
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            Position = 10,
                            Text = "هر موضوعی را در هر زمان مطالعه کنید. هزاران دوره آموزشی را با کمترین قیمت جستجو کنید!"
                        },
                        new
                        {
                            Id = 11,
                            IsDeleted = false,
                            Position = 11,
                            Text = "مشاهده دوره های جدید و 🔥 در جشنواره"
                        },
                        new
                        {
                            Id = 12,
                            IsDeleted = false,
                            Position = 12,
                            Text = "60"
                        },
                        new
                        {
                            Id = 13,
                            IsDeleted = false,
                            Position = 13,
                            Text = "ارائه راهکارها و شرایط سخت تایپ به پایان رسد وزمان مورد نیاز شامل حروفچینی دستاوردهای اصلی و جوابگوی سوالات پیوسته اهل دنیای موجود طراحی اساسا مورد استفاده قرار گیرد."
                        });
                });

            modelBuilder.Entity("Kidemy.Domain.Models.FAQ.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FAQ");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Identity.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            UniqueName = "AdminPanel"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageUsers"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            ParentId = 2,
                            UniqueName = "UserList"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            ParentId = 2,
                            UniqueName = "CreateUser"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            ParentId = 2,
                            UniqueName = "UpdateUser"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            ParentId = 2,
                            UniqueName = "DeleteUser"
                        },
                        new
                        {
                            Id = 127,
                            IsDeleted = false,
                            ParentId = 2,
                            UniqueName = "UserProfile"
                        },
                        new
                        {
                            Id = 135,
                            IsDeleted = false,
                            ParentId = 2,
                            UniqueName = "UnableToWithdrawUser"
                        },
                        new
                        {
                            Id = 136,
                            IsDeleted = false,
                            ParentId = 2,
                            UniqueName = "AbleToWithdrawUser"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageRoles"
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            ParentId = 7,
                            UniqueName = "RolesList"
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            ParentId = 7,
                            UniqueName = "CreateRole"
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            ParentId = 7,
                            UniqueName = "UpdateRole"
                        },
                        new
                        {
                            Id = 11,
                            IsDeleted = false,
                            ParentId = 7,
                            UniqueName = "DeleteRole"
                        },
                        new
                        {
                            Id = 12,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageWallet"
                        },
                        new
                        {
                            Id = 13,
                            IsDeleted = false,
                            ParentId = 12,
                            UniqueName = "ChargeWallet"
                        },
                        new
                        {
                            Id = 14,
                            IsDeleted = false,
                            ParentId = 12,
                            UniqueName = "WithdrawFromWallet"
                        },
                        new
                        {
                            Id = 15,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageSocialMedia"
                        },
                        new
                        {
                            Id = 16,
                            IsDeleted = false,
                            ParentId = 15,
                            UniqueName = "SocialMediaList"
                        },
                        new
                        {
                            Id = 17,
                            IsDeleted = false,
                            ParentId = 15,
                            UniqueName = "CreateSocialMedia"
                        },
                        new
                        {
                            Id = 18,
                            IsDeleted = false,
                            ParentId = 15,
                            UniqueName = "UpdateSocialMedia"
                        },
                        new
                        {
                            Id = 19,
                            IsDeleted = false,
                            ParentId = 15,
                            UniqueName = "DeleteSocialMedia"
                        },
                        new
                        {
                            Id = 22,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageTicket"
                        },
                        new
                        {
                            Id = 23,
                            IsDeleted = false,
                            ParentId = 22,
                            UniqueName = "UpdateTicket"
                        },
                        new
                        {
                            Id = 24,
                            IsDeleted = false,
                            ParentId = 22,
                            UniqueName = "TicketDetails"
                        },
                        new
                        {
                            Id = 25,
                            IsDeleted = false,
                            ParentId = 22,
                            UniqueName = "TicketList"
                        },
                        new
                        {
                            Id = 26,
                            IsDeleted = false,
                            ParentId = 22,
                            UniqueName = "CreateTicket"
                        },
                        new
                        {
                            Id = 20,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageContactUs"
                        },
                        new
                        {
                            Id = 21,
                            IsDeleted = false,
                            ParentId = 20,
                            UniqueName = "UpdateContactUs"
                        },
                        new
                        {
                            Id = 27,
                            IsDeleted = false,
                            ParentId = 20,
                            UniqueName = "ContactUsFormList"
                        },
                        new
                        {
                            Id = 28,
                            IsDeleted = false,
                            ParentId = 20,
                            UniqueName = "ContactUsFormReply"
                        },
                        new
                        {
                            Id = 29,
                            IsDeleted = false,
                            ParentId = 20,
                            UniqueName = "DeleteContactUsForm"
                        },
                        new
                        {
                            Id = 56,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageAboutUs"
                        },
                        new
                        {
                            Id = 30,
                            IsDeleted = false,
                            ParentId = 56,
                            UniqueName = "UpdateAboutUs"
                        },
                        new
                        {
                            Id = 57,
                            IsDeleted = false,
                            ParentId = 56,
                            UniqueName = "CreateProgressBar"
                        },
                        new
                        {
                            Id = 58,
                            IsDeleted = false,
                            ParentId = 56,
                            UniqueName = "ProgressBarList"
                        },
                        new
                        {
                            Id = 59,
                            IsDeleted = false,
                            ParentId = 56,
                            UniqueName = "DeleteProgressBar"
                        },
                        new
                        {
                            Id = 60,
                            IsDeleted = false,
                            ParentId = 56,
                            UniqueName = "UpdateProgresBar"
                        },
                        new
                        {
                            Id = 31,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManagePages"
                        },
                        new
                        {
                            Id = 32,
                            IsDeleted = false,
                            ParentId = 31,
                            UniqueName = "CreatePage"
                        },
                        new
                        {
                            Id = 33,
                            IsDeleted = false,
                            ParentId = 31,
                            UniqueName = "UpdatePage"
                        },
                        new
                        {
                            Id = 34,
                            IsDeleted = false,
                            ParentId = 31,
                            UniqueName = "PagesList"
                        },
                        new
                        {
                            Id = 35,
                            IsDeleted = false,
                            ParentId = 31,
                            UniqueName = "DeletePage"
                        },
                        new
                        {
                            Id = 36,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageNewsletter"
                        },
                        new
                        {
                            Id = 37,
                            IsDeleted = false,
                            ParentId = 36,
                            UniqueName = "MembersList_Newsletter"
                        },
                        new
                        {
                            Id = 38,
                            IsDeleted = false,
                            ParentId = 36,
                            UniqueName = "DeleteMember_Newsletter"
                        },
                        new
                        {
                            Id = 39,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageSurvey"
                        },
                        new
                        {
                            Id = 40,
                            IsDeleted = false,
                            ParentId = 39,
                            UniqueName = "SurveyList"
                        },
                        new
                        {
                            Id = 41,
                            IsDeleted = false,
                            ParentId = 39,
                            UniqueName = "CreateSurvey"
                        },
                        new
                        {
                            Id = 42,
                            IsDeleted = false,
                            ParentId = 39,
                            UniqueName = "UpdateSurvey"
                        },
                        new
                        {
                            Id = 43,
                            IsDeleted = false,
                            ParentId = 39,
                            UniqueName = "DeleteSurvey"
                        },
                        new
                        {
                            Id = 44,
                            IsDeleted = false,
                            ParentId = 39,
                            UniqueName = "SurveyQuestionsList"
                        },
                        new
                        {
                            Id = 45,
                            IsDeleted = false,
                            ParentId = 39,
                            UniqueName = "CreateSurveyQuestion"
                        },
                        new
                        {
                            Id = 46,
                            IsDeleted = false,
                            ParentId = 39,
                            UniqueName = "UpdateSurveyQuestion"
                        },
                        new
                        {
                            Id = 47,
                            IsDeleted = false,
                            ParentId = 39,
                            UniqueName = "DeleteSurveyQuestion"
                        },
                        new
                        {
                            Id = 48,
                            IsDeleted = false,
                            ParentId = 39,
                            UniqueName = "SurveyAnswersList"
                        },
                        new
                        {
                            Id = 49,
                            IsDeleted = false,
                            ParentId = 39,
                            UniqueName = "SurveyAnswerDetails"
                        },
                        new
                        {
                            Id = 50,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageLinks"
                        },
                        new
                        {
                            Id = 51,
                            IsDeleted = false,
                            ParentId = 50,
                            UniqueName = "CreateLink"
                        },
                        new
                        {
                            Id = 52,
                            IsDeleted = false,
                            ParentId = 50,
                            UniqueName = "UpdateLink"
                        },
                        new
                        {
                            Id = 53,
                            IsDeleted = false,
                            ParentId = 50,
                            UniqueName = "LinksList"
                        },
                        new
                        {
                            Id = 54,
                            IsDeleted = false,
                            ParentId = 50,
                            UniqueName = "DeleteLink"
                        },
                        new
                        {
                            Id = 55,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "UpdateSiteSetting"
                        },
                        new
                        {
                            Id = 64,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageBlogs"
                        },
                        new
                        {
                            Id = 65,
                            IsDeleted = false,
                            ParentId = 64,
                            UniqueName = "CreateBlog"
                        },
                        new
                        {
                            Id = 66,
                            IsDeleted = false,
                            ParentId = 64,
                            UniqueName = "UpdateBlog"
                        },
                        new
                        {
                            Id = 67,
                            IsDeleted = false,
                            ParentId = 64,
                            UniqueName = "BlogsList"
                        },
                        new
                        {
                            Id = 68,
                            IsDeleted = false,
                            ParentId = 64,
                            UniqueName = "DeleteBlog"
                        },
                        new
                        {
                            Id = 69,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageSmsProvide"
                        },
                        new
                        {
                            Id = 70,
                            IsDeleted = false,
                            ParentId = 69,
                            UniqueName = "SmsProviderList"
                        },
                        new
                        {
                            Id = 71,
                            IsDeleted = false,
                            ParentId = 69,
                            UniqueName = "UpdateSmsProvider"
                        },
                        new
                        {
                            Id = 72,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageFAQs"
                        },
                        new
                        {
                            Id = 73,
                            IsDeleted = false,
                            ParentId = 72,
                            UniqueName = "CreateFAQ"
                        },
                        new
                        {
                            Id = 74,
                            IsDeleted = false,
                            ParentId = 72,
                            UniqueName = "UpdateFAQ"
                        },
                        new
                        {
                            Id = 75,
                            IsDeleted = false,
                            ParentId = 72,
                            UniqueName = "FAQsList"
                        },
                        new
                        {
                            Id = 76,
                            IsDeleted = false,
                            ParentId = 72,
                            UniqueName = "DeleteFAQ"
                        },
                        new
                        {
                            Id = 77,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageSendNotification"
                        },
                        new
                        {
                            Id = 78,
                            IsDeleted = false,
                            ParentId = 77,
                            UniqueName = "SendNotification"
                        },
                        new
                        {
                            Id = 79,
                            IsDeleted = false,
                            ParentId = 77,
                            UniqueName = "FilterUsersForSendNotification"
                        },
                        new
                        {
                            Id = 190,
                            IsDeleted = false,
                            ParentId = 77,
                            UniqueName = "NotificationList"
                        },
                        new
                        {
                            Id = 191,
                            IsDeleted = false,
                            ParentId = 77,
                            UniqueName = "DeleteNotification"
                        },
                        new
                        {
                            Id = 192,
                            IsDeleted = false,
                            ParentId = 77,
                            UniqueName = "UpdateNotification"
                        },
                        new
                        {
                            Id = 80,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageDiscount"
                        },
                        new
                        {
                            Id = 81,
                            IsDeleted = false,
                            ParentId = 80,
                            UniqueName = "DiscountList"
                        },
                        new
                        {
                            Id = 82,
                            IsDeleted = false,
                            ParentId = 80,
                            UniqueName = "CreateDiscount"
                        },
                        new
                        {
                            Id = 83,
                            IsDeleted = false,
                            ParentId = 80,
                            UniqueName = "UpdateDiscount"
                        },
                        new
                        {
                            Id = 84,
                            IsDeleted = false,
                            ParentId = 80,
                            UniqueName = "DeleteDiscount"
                        },
                        new
                        {
                            Id = 85,
                            IsDeleted = false,
                            ParentId = 80,
                            UniqueName = "DiscountLimitationList"
                        },
                        new
                        {
                            Id = 86,
                            IsDeleted = false,
                            ParentId = 80,
                            UniqueName = "CreateDiscountLimitation"
                        },
                        new
                        {
                            Id = 87,
                            IsDeleted = false,
                            ParentId = 80,
                            UniqueName = "UpdateDiscountLimitation"
                        },
                        new
                        {
                            Id = 88,
                            IsDeleted = false,
                            ParentId = 80,
                            UniqueName = "DeleteDiscountLimitation"
                        },
                        new
                        {
                            Id = 89,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageMasters"
                        },
                        new
                        {
                            Id = 90,
                            IsDeleted = false,
                            ParentId = 89,
                            UniqueName = "MasterList"
                        },
                        new
                        {
                            Id = 99,
                            IsDeleted = false,
                            ParentId = 89,
                            UniqueName = "MasterDetails"
                        },
                        new
                        {
                            Id = 153,
                            IsDeleted = false,
                            ParentId = 89,
                            UniqueName = "SetBlockedAmount"
                        },
                        new
                        {
                            Id = 91,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageDynamicTexts"
                        },
                        new
                        {
                            Id = 92,
                            IsDeleted = false,
                            ParentId = 91,
                            UniqueName = "DynamicTextsList"
                        },
                        new
                        {
                            Id = 93,
                            IsDeleted = false,
                            ParentId = 91,
                            UniqueName = "UpdateDynamicText"
                        },
                        new
                        {
                            Id = 94,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageVIPServices"
                        },
                        new
                        {
                            Id = 95,
                            IsDeleted = false,
                            ParentId = 94,
                            UniqueName = "VIPPlansList"
                        },
                        new
                        {
                            Id = 96,
                            IsDeleted = false,
                            ParentId = 94,
                            UniqueName = "CreateVIPPlan"
                        },
                        new
                        {
                            Id = 97,
                            IsDeleted = false,
                            ParentId = 94,
                            UniqueName = "UpdateVIPPlan"
                        },
                        new
                        {
                            Id = 98,
                            IsDeleted = false,
                            ParentId = 94,
                            UniqueName = "DeleteVIPPlan"
                        },
                        new
                        {
                            Id = 100,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageMastersContracts"
                        },
                        new
                        {
                            Id = 101,
                            IsDeleted = false,
                            ParentId = 100,
                            UniqueName = "MasterContractsList"
                        },
                        new
                        {
                            Id = 102,
                            IsDeleted = false,
                            ParentId = 100,
                            UniqueName = "CreateMasterContract"
                        },
                        new
                        {
                            Id = 103,
                            IsDeleted = false,
                            ParentId = 100,
                            UniqueName = "UpdateMasterContract"
                        },
                        new
                        {
                            Id = 104,
                            IsDeleted = false,
                            ParentId = 100,
                            UniqueName = "MasterContractsDetails"
                        },
                        new
                        {
                            Id = 105,
                            IsDeleted = false,
                            ParentId = 100,
                            UniqueName = "PendingContractsList"
                        },
                        new
                        {
                            Id = 106,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageCourseQuestion"
                        },
                        new
                        {
                            Id = 107,
                            IsDeleted = false,
                            ParentId = 106,
                            UniqueName = "CourseQuestionList"
                        },
                        new
                        {
                            Id = 108,
                            IsDeleted = false,
                            ParentId = 106,
                            UniqueName = "CourseQuestionMessagesList"
                        },
                        new
                        {
                            Id = 109,
                            IsDeleted = false,
                            ParentId = 106,
                            UniqueName = "CloseCourseQuestion"
                        },
                        new
                        {
                            Id = 110,
                            IsDeleted = false,
                            ParentId = 106,
                            UniqueName = "OpenCourseQuestion"
                        },
                        new
                        {
                            Id = 111,
                            IsDeleted = false,
                            ParentId = 106,
                            UniqueName = "ConfirmCourseQuestion"
                        },
                        new
                        {
                            Id = 112,
                            IsDeleted = false,
                            ParentId = 106,
                            UniqueName = "DeleteCourseQuestion"
                        },
                        new
                        {
                            Id = 113,
                            IsDeleted = false,
                            ParentId = 106,
                            UniqueName = "DeleteCourseQuestionAnswer"
                        },
                        new
                        {
                            Id = 114,
                            IsDeleted = false,
                            ParentId = 106,
                            UniqueName = "ConfirmCourseQuestionAnswer"
                        },
                        new
                        {
                            Id = 115,
                            IsDeleted = false,
                            ParentId = 106,
                            UniqueName = "NotConfirmedCourseQuestionAndAnswersList"
                        },
                        new
                        {
                            Id = 116,
                            IsDeleted = false,
                            ParentId = 106,
                            UniqueName = "CourseQuestionsDoesNotAnsweredByTeacherAfter48HoursList"
                        },
                        new
                        {
                            Id = 117,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageCourseCategories"
                        },
                        new
                        {
                            Id = 118,
                            IsDeleted = false,
                            ParentId = 117,
                            UniqueName = "CourseCategories"
                        },
                        new
                        {
                            Id = 119,
                            IsDeleted = false,
                            ParentId = 117,
                            UniqueName = "CreateNewCourseCategory"
                        },
                        new
                        {
                            Id = 120,
                            IsDeleted = false,
                            ParentId = 117,
                            UniqueName = "DeleteCourseCategory"
                        },
                        new
                        {
                            Id = 121,
                            IsDeleted = false,
                            ParentId = 118,
                            UniqueName = "UpdateCourseCategory"
                        },
                        new
                        {
                            Id = 122,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageCourses"
                        },
                        new
                        {
                            Id = 123,
                            IsDeleted = false,
                            ParentId = 122,
                            UniqueName = "CoursesList"
                        },
                        new
                        {
                            Id = 124,
                            IsDeleted = false,
                            ParentId = 122,
                            UniqueName = "CreateNewCourse"
                        },
                        new
                        {
                            Id = 125,
                            IsDeleted = false,
                            ParentId = 122,
                            UniqueName = "DeleteCourse"
                        },
                        new
                        {
                            Id = 126,
                            IsDeleted = false,
                            ParentId = 122,
                            UniqueName = "UpdateCourse"
                        },
                        new
                        {
                            Id = 181,
                            IsDeleted = false,
                            ParentId = 122,
                            UniqueName = "CourseVideoList"
                        },
                        new
                        {
                            Id = 182,
                            IsDeleted = false,
                            ParentId = 122,
                            UniqueName = "DeleteCourseVideo"
                        },
                        new
                        {
                            Id = 183,
                            IsDeleted = false,
                            ParentId = 122,
                            UniqueName = "CreateNewCourseVideo"
                        },
                        new
                        {
                            Id = 184,
                            IsDeleted = false,
                            ParentId = 122,
                            UniqueName = "UpdateCourseVideo"
                        },
                        new
                        {
                            Id = 185,
                            IsDeleted = false,
                            ParentId = 122,
                            UniqueName = "DownloadCourseVideo"
                        },
                        new
                        {
                            Id = 193,
                            IsDeleted = false,
                            ParentId = 122,
                            UniqueName = "PublishCourseVideo"
                        },
                        new
                        {
                            Id = 128,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageAccountBankCard"
                        },
                        new
                        {
                            Id = 129,
                            IsDeleted = false,
                            ParentId = 128,
                            UniqueName = "BankAccountCardList"
                        },
                        new
                        {
                            Id = 130,
                            IsDeleted = false,
                            ParentId = 128,
                            UniqueName = "ConfirmBankAccountCard"
                        },
                        new
                        {
                            Id = 131,
                            IsDeleted = false,
                            ParentId = 128,
                            UniqueName = "RejectBankAccountCard"
                        },
                        new
                        {
                            Id = 132,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageSettlementTransaction"
                        },
                        new
                        {
                            Id = 133,
                            IsDeleted = false,
                            ParentId = 132,
                            UniqueName = "AddSettlementTransaction"
                        },
                        new
                        {
                            Id = 134,
                            IsDeleted = false,
                            ParentId = 132,
                            UniqueName = "EditSettlementTransaction"
                        },
                        new
                        {
                            Id = 144,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageWithdrawRequests"
                        },
                        new
                        {
                            Id = 145,
                            IsDeleted = false,
                            ParentId = 144,
                            UniqueName = "ListOfWithdrawRequests"
                        },
                        new
                        {
                            Id = 146,
                            IsDeleted = false,
                            ParentId = 144,
                            UniqueName = "AcceptWithdrawRequest"
                        },
                        new
                        {
                            Id = 147,
                            IsDeleted = false,
                            ParentId = 144,
                            UniqueName = "RejectWithdrawRequest"
                        },
                        new
                        {
                            Id = 148,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageAdviser"
                        },
                        new
                        {
                            Id = 149,
                            IsDeleted = false,
                            ParentId = 148,
                            UniqueName = "AdviserList"
                        },
                        new
                        {
                            Id = 150,
                            IsDeleted = false,
                            ParentId = 148,
                            UniqueName = "AddAdviser"
                        },
                        new
                        {
                            Id = 151,
                            IsDeleted = false,
                            ParentId = 148,
                            UniqueName = "EditAdviser"
                        },
                        new
                        {
                            Id = 152,
                            IsDeleted = false,
                            ParentId = 148,
                            UniqueName = "DeleteAdviser"
                        },
                        new
                        {
                            Id = 140,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageOrders"
                        },
                        new
                        {
                            Id = 141,
                            IsDeleted = false,
                            ParentId = 140,
                            UniqueName = "OrdersList"
                        },
                        new
                        {
                            Id = 142,
                            IsDeleted = false,
                            ParentId = 140,
                            UniqueName = "OrderDetails"
                        },
                        new
                        {
                            Id = 155,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageSliders"
                        },
                        new
                        {
                            Id = 156,
                            IsDeleted = false,
                            ParentId = 155,
                            UniqueName = "SlidersList"
                        },
                        new
                        {
                            Id = 157,
                            IsDeleted = false,
                            ParentId = 155,
                            UniqueName = "CreateSlider"
                        },
                        new
                        {
                            Id = 158,
                            IsDeleted = false,
                            ParentId = 155,
                            UniqueName = "UpdateSlider"
                        },
                        new
                        {
                            Id = 159,
                            IsDeleted = false,
                            ParentId = 155,
                            UniqueName = "DeleteSlider"
                        },
                        new
                        {
                            Id = 160,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageBanners"
                        },
                        new
                        {
                            Id = 161,
                            IsDeleted = false,
                            ParentId = 160,
                            UniqueName = "BannersList"
                        },
                        new
                        {
                            Id = 162,
                            IsDeleted = false,
                            ParentId = 160,
                            UniqueName = "CreateBanner"
                        },
                        new
                        {
                            Id = 163,
                            IsDeleted = false,
                            ParentId = 160,
                            UniqueName = "UpdateBanner"
                        },
                        new
                        {
                            Id = 164,
                            IsDeleted = false,
                            ParentId = 160,
                            UniqueName = "DeleteBanner"
                        },
                        new
                        {
                            Id = 165,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageCourseRequests"
                        },
                        new
                        {
                            Id = 166,
                            IsDeleted = false,
                            ParentId = 165,
                            UniqueName = "CourseRequestsList"
                        },
                        new
                        {
                            Id = 167,
                            IsDeleted = false,
                            ParentId = 165,
                            UniqueName = "ConfirmCourseRequest"
                        },
                        new
                        {
                            Id = 168,
                            IsDeleted = false,
                            ParentId = 165,
                            UniqueName = "NotConfirmCourseRequest"
                        },
                        new
                        {
                            Id = 169,
                            IsDeleted = false,
                            ParentId = 165,
                            UniqueName = "CourseRequestDetails"
                        },
                        new
                        {
                            Id = 170,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageMastersNotifications"
                        },
                        new
                        {
                            Id = 171,
                            IsDeleted = false,
                            ParentId = 170,
                            UniqueName = "SendMastersNotifications"
                        },
                        new
                        {
                            Id = 177,
                            IsDeleted = false,
                            ParentId = 170,
                            UniqueName = "MastersNotificationsList"
                        },
                        new
                        {
                            Id = 178,
                            IsDeleted = false,
                            ParentId = 170,
                            UniqueName = "DeleteMasterNotification"
                        },
                        new
                        {
                            Id = 179,
                            IsDeleted = false,
                            ParentId = 170,
                            UniqueName = "UpdateMasterNotification"
                        },
                        new
                        {
                            Id = 172,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "Master"
                        },
                        new
                        {
                            Id = 173,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageConsultationRequest"
                        },
                        new
                        {
                            Id = 174,
                            IsDeleted = false,
                            ParentId = 173,
                            UniqueName = "ConsultationRequestList"
                        },
                        new
                        {
                            Id = 175,
                            IsDeleted = false,
                            ParentId = 173,
                            UniqueName = "SetTimeConsultationRequest"
                        },
                        new
                        {
                            Id = 176,
                            IsDeleted = false,
                            ParentId = 173,
                            UniqueName = "ConsultationRequestCancele"
                        },
                        new
                        {
                            Id = 186,
                            IsDeleted = false,
                            ParentId = 1,
                            UniqueName = "ManageCourseComments"
                        },
                        new
                        {
                            Id = 187,
                            IsDeleted = false,
                            ParentId = 186,
                            UniqueName = "CourseCommentsList"
                        },
                        new
                        {
                            Id = 188,
                            IsDeleted = false,
                            ParentId = 186,
                            UniqueName = "ReportedCommentsList"
                        },
                        new
                        {
                            Id = 189,
                            IsDeleted = false,
                            ParentId = 186,
                            UniqueName = "ConfirmOrDenyComment"
                        });
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDateOnUtc = new DateTime(2024, 5, 5, 8, 10, 48, 944, DateTimeKind.Utc).AddTicks(4552),
                            IsDeleted = false,
                            Title = "ادمین",
                            UniqueName = "Admin",
                            UpdatedDateOnUtc = new DateTime(2024, 5, 5, 8, 10, 48, 944, DateTimeKind.Utc).AddTicks(4554)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDateOnUtc = new DateTime(2024, 5, 5, 8, 10, 48, 944, DateTimeKind.Utc).AddTicks(4555),
                            IsDeleted = false,
                            Title = "استاد",
                            UniqueName = "Master",
                            UpdatedDateOnUtc = new DateTime(2024, 5, 5, 8, 10, 48, 944, DateTimeKind.Utc).AddTicks(4556)
                        });
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Identity.RolePermissionMapping", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissionMapping");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 5
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 6
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 127
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 135
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 136
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 7
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 8
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 9
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 10
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 11
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 12
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 13
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 14
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 15
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 16
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 17
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 18
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 19
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 22
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 23
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 24
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 25
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 26
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 20
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 21
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 27
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 28
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 29
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 56
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 30
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 57
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 58
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 59
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 60
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 31
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 32
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 33
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 34
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 35
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 36
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 37
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 38
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 39
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 40
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 41
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 42
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 43
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 44
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 45
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 46
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 47
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 48
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 49
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 50
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 51
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 52
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 53
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 54
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 55
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 64
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 65
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 66
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 67
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 68
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 69
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 70
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 71
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 72
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 73
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 74
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 75
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 76
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 77
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 78
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 79
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 190
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 191
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 192
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 80
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 81
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 82
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 83
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 84
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 85
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 86
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 87
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 88
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 89
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 90
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 99
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 153
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 91
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 92
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 93
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 94
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 95
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 96
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 97
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 98
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 100
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 101
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 102
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 103
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 104
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 105
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 106
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 107
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 108
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 109
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 110
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 111
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 112
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 113
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 114
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 115
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 116
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 117
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 118
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 119
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 120
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 121
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 122
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 123
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 124
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 125
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 126
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 181
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 182
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 183
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 184
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 185
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 193
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 128
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 129
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 130
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 131
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 132
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 133
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 134
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 144
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 145
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 146
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 147
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 148
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 149
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 150
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 151
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 152
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 140
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 141
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 142
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 155
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 156
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 157
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 158
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 159
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 160
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 161
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 162
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 163
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 164
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 165
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 166
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 167
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 168
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 169
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 170
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 171
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 177
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 178
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 179
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 172
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 173
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 174
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 175
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 176
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 186
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 187
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 188
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 189
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 172
                        });
                });

            modelBuilder.Entity("Kidemy.Domain.Models.InPersonCourse.InPersonCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachmentFileName")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool>("CertificateAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("CourseAudience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseGoals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseRequirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseTopics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("MetaTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<bool>("PrivateClassAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("nvarchar(750)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("InPersonCourse");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.InPersonCourse.InPersonCourseCategoryMapping", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("InPersonCourseCategoryMapping");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.InPersonCourse.InPersonCourseTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("InPersonCourseTag");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.InPersonCourse.InPersonCourseTagMapping", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("InPersonCourseTagMapping");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.InPersonCourse.InPersonCourseVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("IP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("InPersonCourseVisit");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Link.Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LinkType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Link");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "/FAQs",
                            CreatedDateOnUtc = new DateTime(2024, 5, 5, 8, 10, 48, 944, DateTimeKind.Utc).AddTicks(5214),
                            IsDeleted = false,
                            LinkType = 2,
                            Title = "سوالات متداول",
                            UpdatedDateOnUtc = new DateTime(2024, 5, 5, 8, 10, 48, 944, DateTimeKind.Utc).AddTicks(5213)
                        });
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Master.Master", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("BlockedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("FatherName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IdentificationFileName")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("IdentificationNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NationalIDNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PlaceOfIssuance")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Master");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Master.MasterContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MasterContract");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Master.UploadedMasterContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MasterContractId")
                        .HasColumnType("int");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MasterContractId");

                    b.HasIndex("MasterId");

                    b.ToTable("UploadedMasterContract");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.MasterNotification.MasterNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DemoVideoFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MasterNotification");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.MasterNotification.NotificationMasterMapping", b =>
                {
                    b.Property<int>("MasterNotificationId")
                        .HasColumnType("int");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("MasterNotificationId", "MasterId");

                    b.ToTable("NotificationMasterMapping");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Newsletter.Newsletter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Newsletter");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Notification.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Notification.NotificationUserMapping", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId", "UserId");

                    b.ToTable("NotificationUserMapping");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Order.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DiscountedTotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Order.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DiscountedUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Page.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LinkPlace")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Page");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "<h2 style=\"margin-right: 0\"><span style=\"color: rgba(76, 230, 230, 1)\"><strong>مراحل همکاری در کیدمی</strong></span></h2><p style=\"margin-right: 0; text-align: justify\">کیدمی یک پلتفرم آموزشی در بستر تجارت الکترونیک می باشد که از اساتید با تجربه در این حوزه دعوت به همکاری می نماید.</p><p style=\"margin-right: 0; text-align: justify\">اگر تمایل دارید در کیدمی در زمینه تولید محتوای آموزشی فعالیت نمایید، می توانید از طریق&nbsp;تیکت (در پنل کاربری) &nbsp;با کارشناسان ما در ارتباط باشید.</p><p style=\"margin-right: 0; text-align: justify\">جهت شروع همکاری به این نکات توجه داشته باشید:</p><p style=\"margin-right: 0; text-align: justify\">. &nbsp;حداقل سن برای تدریس 18 سال می باشد.</p><p style=\"margin-right: 0; text-align: justify\">. &nbsp;برای شروع تدریس در کیدمی باید یک دوره رایگان که در قسمت اعضای ویژه (حداقل 3 ساعت) منتشر می شود را ارائه دهید. در صورتی که زمان دوره کمتر باشد می توانید دو دوره ارائه دهید.</p><p style=\"margin-right: 0; text-align: justify\">. &nbsp;ویدیوی معرفی دوره باید شامل معرفی خود و معرفی دوره و آنچه که می خواهید در دوره تدریس نمایید باشد.</p><p style=\"margin-right: 0; text-align: justify\">. &nbsp;کیفیت صدا و تصویر ویدیوها باید مناسب باشد.</p><p style=\"margin-right: 0; text-align: justify\">توجه داشته باشید، برای دوره های نقدی تعدادی از قسمت های هر دوره به صورت رندم رایگان منتشر می شوند، که تعداد این بخش های رایگان با توجه به زمان دوره تعیین می شود.</p><p style=\"margin-right: 0; text-align: justify\">در صورت برگزاری دوره رایگان، دوره رایگان شما نباید به صورت نقدی در سایت وجود داشته باشد.</p><p style=\"margin-right: 0; text-align: justify\">لطفا در هنگام ضبط ویدیو به این سه نکته توجه نمایید:</p><p style=\"margin-right: 0; text-align: justify\"><strong>. &nbsp;ابتدای هر جلسه موشن وجود دارد.</strong></p><p style=\"margin-right: 0; text-align: justify\"><strong>. &nbsp;بعد از موشن، ویدیو باید از صفحه اول سایت کیدمی یا صفحه دوره شروع شود.</strong></p><p style=\"margin-right: 0; text-align: justify\"><strong>. &nbsp;از ابتدای ویدیو (بعد از موشن) تا انتهای ویدیو لوگوی کیدمی باید در پایین گوشه تصویر قرار گیرد.</strong></p><p style=\"margin-right: 0; text-align: justify\">برای دانلود موشن، لوگو واتر مارک و فایل مربوط به مشخصات دوره از این لینک استفاده نمایید.<span style=\"color: rgba(230, 77, 77, 1)\"><strong>(</strong></span><a href= \"/files/Cooperation/KidemyFiles.rar\"><span style=\"color: rgba(230, 77, 77, 1)\"><strong>لینک دانلود</strong></span></a><span style=\"color: rgba(230, 77, 77, 1)\"><strong>)</strong></span></p><p style=\"margin-right: 0; text-align: justify\">ابتدا عنوان دوره خود را در <a href=\"/userpanel/tickets\"><span style=\"color: rgba(77, 230, 153, 1)\">تیکت &nbsp;</span></a>ارسال نمایید.</p><p style=\"margin-right: 0; text-align: justify\">بعد از تایید عنوان دوره، <strong>ویدیوی معرفی، کارت ملی و فایل مشخصات دوره</strong> خود را به صورت یک فایل rar در <a href=\"https://mega.nz/\"><span style=\"color: rgba(230, 77, 77, 1)\"><strong>این لینک</strong></span></a> آپلود نموده و در تیکت، لینک را ارسال نمایید.</p><p style=\"margin-right: 0; text-align: justify\">پس از طی مراحل فوق و تایید کارشناسان، سمت استاد به شما داده شده و بقیه مراحل کار در اختیار شما قرار خواهد گرفت.</p><p style=\"margin-right: 0; text-align: justify\">در رابطه با دوره های نقدی، مدرسین قیمت پیشنهادی دوره خود را ارائه داده و پس از بررسی قیمت گذاری نهایی می گردد.</p><p style=\"margin-right: 0; text-align: justify\">رزومه شما به عنوان مدرس در وب سایت درج خواهد شد .</p><p style=\"margin-right: 0; text-align: justify\">دقت داشته باشید دوره ای که در سایت کیدمی درج شود متعلق به کیدمی خواهد بود و تحت هیچ شرایطی از سایت حذف نخواهد شد و اگر مدرس دوره را در سایت و یا جای دیگری منتشر کند دوره در کیدمی رایگان خواهد شد.</p>",
                            CreatedDateOnUtc = new DateTime(2024, 5, 5, 8, 10, 48, 944, DateTimeKind.Utc).AddTicks(5235),
                            IsDeleted = false,
                            IsPublished = true,
                            LinkPlace = 0,
                            Slug = "همکاری-با-کیدمی",
                            Title = "همکاری با کیدمی",
                            UpdatedDateOnUtc = new DateTime(2024, 5, 5, 8, 10, 48, 944, DateTimeKind.Utc).AddTicks(5232)
                        });
                });

            modelBuilder.Entity("Kidemy.Domain.Models.SettlementTransaction.SettlementTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TrackingCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SettlementTransaction");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.SiteSetting.SiteSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("CollectionManagement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CopyrightDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DefaultPaymentMethod")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("FooterDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogoName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Mobile2")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("NewsletterDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("WithdrawRequestMinimumAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("SiteSetting");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "خیابان ملک",
                            CollectionManagement = "مدیر مجموعه",
                            CopyrightDescription = "حق کپی رایت",
                            DefaultPaymentMethod = 0,
                            Email = "jafarabbaspour1367@gmail.com",
                            FooterDescription = "توضیحات فوتر",
                            IsDeleted = false,
                            LogoName = "لوگو",
                            Mobile = "09125554478",
                            Mobile2 = "09125554478",
                            NewsletterDescription = "توضیحات خبرنامه",
                            WithdrawRequestMinimumAmount = 0m
                        });
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Slider.Slider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(900)
                        .HasColumnType("nvarchar(900)");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("SliderPlace")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("URL")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Slider");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.SmsProvider.SmsProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SmsProviderType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SmsProvider");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiKey = "6AC5E403-C244-49B9-A497-E0436649FBBB",
                            IsDefault = true,
                            IsDeleted = false,
                            SmsProviderType = 0
                        },
                        new
                        {
                            Id = 2,
                            ApiKey = "59693856665334494F3241446C5959517557796D6B78412F334F68496D44784E6C7667544972744E314A493D",
                            IsDefault = false,
                            IsDeleted = false,
                            SmsProviderType = 1
                        });
                });

            modelBuilder.Entity("Kidemy.Domain.Models.SocialMedia.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SocialMedia");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Survey.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Survey");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Survey.SurveyAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasMaxLength(900)
                        .HasColumnType("nvarchar(900)");

                    b.Property<int>("AnswererId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("SurveyAnswer");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Survey.SurveyQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Options")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyQuestion");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Ticket.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Section")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("OwnerUserId"), false);

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Ticket.TicketMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SeenByClient")
                        .HasColumnType("bit");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketMessage");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("BirthDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsBan")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMobileActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Password")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("UnableToWithdraw")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvatarName = "default.png",
                            CreatedDateOnUtc = new DateTime(2024, 5, 5, 8, 10, 48, 944, DateTimeKind.Utc).AddTicks(4851),
                            Email = "admin@gmail.com",
                            FirstName = "Admin",
                            Gender = 0,
                            IsBan = false,
                            IsDeleted = false,
                            IsEmailActive = true,
                            IsMobileActive = true,
                            Mobile = "09122233322",
                            UnableToWithdraw = false,
                            UpdatedDateOnUtc = new DateTime(2024, 5, 5, 8, 10, 48, 944, DateTimeKind.Utc).AddTicks(4852)
                        });
                });

            modelBuilder.Entity("Kidemy.Domain.Models.User.UserRoleMapping", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoleMapping");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Kidemy.Domain.Models.VIPMembers.VIPMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("MembershipEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MembershipStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VIPPlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VIPPlanId");

                    b.ToTable("VIPMember");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.VIPMembers.VIPPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationDay")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("VIPPlan");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDateOnUtc = new DateTime(2024, 5, 5, 8, 10, 48, 944, DateTimeKind.Utc).AddTicks(5181),
                            DurationDay = 30,
                            IsDeleted = false,
                            IsPublished = false,
                            Price = 30000m,
                            Title = "یک ماهه",
                            UpdatedDateOnUtc = new DateTime(2024, 5, 5, 8, 10, 48, 944, DateTimeKind.Utc).AddTicks(5181)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDateOnUtc = new DateTime(2024, 5, 5, 8, 10, 48, 944, DateTimeKind.Utc).AddTicks(5194),
                            DurationDay = 60,
                            IsDeleted = false,
                            IsPublished = false,
                            Price = 60000m,
                            Title = "دو ماهه",
                            UpdatedDateOnUtc = new DateTime(2024, 5, 5, 8, 10, 48, 944, DateTimeKind.Utc).AddTicks(5194)
                        });
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Wallet.WalletTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ConsulationRequestId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.Property<string>("RefId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionCase")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<int>("TransactionWay")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("UserId"), false);

                    b.ToTable("WalletTransaction");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.WithdrawRequest.WithdrawRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DestinationBankAccountCardId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RefId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WalletTransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WithdrawRequest");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Blog.BlogComment", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Blog.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kidemy.Domain.Models.Blog.BlogComment", "ParentComment")
                        .WithMany("ReplyComments")
                        .HasForeignKey("ReplyCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Blog");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Blog.BlogTagMapping", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Blog.Blog", "Blog")
                        .WithMany("BlogTags")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kidemy.Domain.Models.Blog.BlogTag", "Tag")
                        .WithMany("Blogs")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Cart.CartItem", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Cart.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Consultation.AdviserAvailableDate", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Consultation.Adviser", "Adviser")
                        .WithMany("AvailableDates")
                        .HasForeignKey("AdviserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adviser");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Consultation.AdviserConsultationType", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Consultation.Adviser", "Adviser")
                        .WithMany("ConsultationTypes")
                        .HasForeignKey("AdviserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adviser");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Consultation.ConsultationRequest", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Consultation.AdviserConsultationType", "AdviserConsultationType")
                        .WithMany("ConsultationRequest")
                        .HasForeignKey("AdviserConsultationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kidemy.Domain.Models.Consultation.Adviser", "Adviser")
                        .WithMany("ConsultationRequests")
                        .HasForeignKey("AdviserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kidemy.Domain.Models.Consultation.AdviserAvailableDate", "SelectedDate")
                        .WithMany("ConsultationRequest")
                        .HasForeignKey("SelectedDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adviser");

                    b.Navigation("AdviserConsultationType");

                    b.Navigation("SelectedDate");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.ContactUs.ContactUsForm", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.ContactUs.ContactUsForm", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseCategory", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Course.CourseCategory", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCourseCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseCategoryMapping", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Course.CourseCategory", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kidemy.Domain.Models.Course.Course", "Course")
                        .WithMany("Categories")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseComment", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Course.Course", "Course")
                        .WithMany("Comments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kidemy.Domain.Models.Course.CourseComment", "ReplyComment")
                        .WithMany("RepliedComments")
                        .HasForeignKey("ReplyCommnetId");

                    b.Navigation("Course");

                    b.Navigation("ReplyComment");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseCommentReport", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Course.CourseComment", "Comment")
                        .WithMany("CommentReports")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseQuestion", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Course.Course", "Course")
                        .WithMany("CourseQuestions")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseQuestionAnswer", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Course.CourseQuestion", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseTagMapping", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Course.Course", "Course")
                        .WithMany("CourseTags")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kidemy.Domain.Models.Course.CourseTag", "Tag")
                        .WithMany("Courses")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseUserMapping", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Course.Course", "Course")
                        .WithMany("Users")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseVideo", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Course.Course", "Course")
                        .WithMany("Videos")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kidemy.Domain.Models.Course.CourseVideoCategory", "VideoCategory")
                        .WithMany("Videos")
                        .HasForeignKey("VideoCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("VideoCategory");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseView", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Course.Course", "Course")
                        .WithMany("CourseViews")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.CourseRequest.CourseRequestMasterVolunteer", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.CourseRequest.CourseRequest", "CourseRequest")
                        .WithMany("MasterVolunteers")
                        .HasForeignKey("CourseRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseRequest");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.CourseRequest.CourseRequestVote", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.CourseRequest.CourseRequest", null)
                        .WithMany("Votes")
                        .HasForeignKey("CourseRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Discount.DiscountLimitation", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Discount.Discount", "Discount")
                        .WithMany("DiscountLimitations")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Discount.DiscountLimitationCategoryMapping", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Discount.DiscountLimitation", "DiscountLimitation")
                        .WithMany("Categories")
                        .HasForeignKey("DiscountLimitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscountLimitation");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Discount.DiscountLimitationCourseMapping", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Discount.DiscountLimitation", "DiscountLimitation")
                        .WithMany("Courses")
                        .HasForeignKey("DiscountLimitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscountLimitation");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Discount.DiscountLimitationUsageCountMapping", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Discount.DiscountLimitation", "DiscountLimitation")
                        .WithOne("UsageCount")
                        .HasForeignKey("Kidemy.Domain.Models.Discount.DiscountLimitationUsageCountMapping", "DiscountLimitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscountLimitation");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Discount.DiscountLimitationUserMapping", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Discount.DiscountLimitation", "DiscountLimitation")
                        .WithMany("Users")
                        .HasForeignKey("DiscountLimitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscountLimitation");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Discount.DiscountUsage", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Discount.Discount", "Discount")
                        .WithMany("DiscountUsages")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kidemy.Domain.Models.Order.Order", "Order")
                        .WithMany("DiscountUsage")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Kidemy.Domain.Models.Order.OrderItem", "OrderItem")
                        .WithOne("DiscountUsage")
                        .HasForeignKey("Kidemy.Domain.Models.Discount.DiscountUsage", "OrderItemId");

                    b.Navigation("Discount");

                    b.Navigation("Order");

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Identity.RolePermissionMapping", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Identity.Permission", "Permission")
                        .WithMany("Roles")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kidemy.Domain.Models.Identity.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.InPersonCourse.InPersonCourseCategoryMapping", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Course.CourseCategory", "CourseCategory")
                        .WithMany("InPersonCourses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kidemy.Domain.Models.InPersonCourse.InPersonCourse", "InPersonCourse")
                        .WithMany("Categories")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseCategory");

                    b.Navigation("InPersonCourse");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.InPersonCourse.InPersonCourseTagMapping", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.InPersonCourse.InPersonCourse", "Course")
                        .WithMany("Tags")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kidemy.Domain.Models.InPersonCourse.InPersonCourseTag", "Tag")
                        .WithMany("Courses")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Master.Master", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.User.User", "User")
                        .WithOne()
                        .HasForeignKey("Kidemy.Domain.Models.Master.Master", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Master.UploadedMasterContract", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Master.MasterContract", "MasterContract")
                        .WithMany("UploadedMasterContracts")
                        .HasForeignKey("MasterContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kidemy.Domain.Models.Master.Master", "Master")
                        .WithMany("UploadedMasterContracts")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");

                    b.Navigation("MasterContract");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.MasterNotification.NotificationMasterMapping", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.MasterNotification.MasterNotification", "MasterNotification")
                        .WithMany("Masters")
                        .HasForeignKey("MasterNotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterNotification");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Notification.NotificationUserMapping", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Notification.Notification", "Notification")
                        .WithMany("Users")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Order.OrderItem", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Order.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Survey.SurveyAnswer", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Survey.SurveyQuestion", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Survey.SurveyQuestion", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Survey.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Ticket.TicketMessage", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.Ticket.Ticket", "Ticket")
                        .WithMany("Messages")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.User.UserRoleMapping", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.User.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.VIPMembers.VIPMember", b =>
                {
                    b.HasOne("Kidemy.Domain.Models.VIPMembers.VIPPlan", "VIPPlan")
                        .WithMany("VIPMembers")
                        .HasForeignKey("VIPPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VIPPlan");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Blog.Blog", b =>
                {
                    b.Navigation("BlogTags");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Blog.BlogComment", b =>
                {
                    b.Navigation("ReplyComments");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Blog.BlogTag", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Cart.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Consultation.Adviser", b =>
                {
                    b.Navigation("AvailableDates");

                    b.Navigation("ConsultationRequests");

                    b.Navigation("ConsultationTypes");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Consultation.AdviserAvailableDate", b =>
                {
                    b.Navigation("ConsultationRequest");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Consultation.AdviserConsultationType", b =>
                {
                    b.Navigation("ConsultationRequest");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.Course", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Comments");

                    b.Navigation("CourseQuestions");

                    b.Navigation("CourseTags");

                    b.Navigation("CourseViews");

                    b.Navigation("Users");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseCategory", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("InPersonCourses");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseComment", b =>
                {
                    b.Navigation("CommentReports");

                    b.Navigation("RepliedComments");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseTag", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Course.CourseVideoCategory", b =>
                {
                    b.Navigation("Videos");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.CourseRequest.CourseRequest", b =>
                {
                    b.Navigation("MasterVolunteers");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Discount.Discount", b =>
                {
                    b.Navigation("DiscountLimitations");

                    b.Navigation("DiscountUsages");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Discount.DiscountLimitation", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Courses");

                    b.Navigation("UsageCount");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Identity.Permission", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Identity.Role", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.InPersonCourse.InPersonCourse", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.InPersonCourse.InPersonCourseTag", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Master.Master", b =>
                {
                    b.Navigation("UploadedMasterContracts");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Master.MasterContract", b =>
                {
                    b.Navigation("UploadedMasterContracts");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.MasterNotification.MasterNotification", b =>
                {
                    b.Navigation("Masters");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Notification.Notification", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Order.Order", b =>
                {
                    b.Navigation("DiscountUsage");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Order.OrderItem", b =>
                {
                    b.Navigation("DiscountUsage")
                        .IsRequired();
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Survey.Survey", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Survey.SurveyQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.Ticket.Ticket", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.User.User", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Kidemy.Domain.Models.VIPMembers.VIPPlan", b =>
                {
                    b.Navigation("VIPMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
